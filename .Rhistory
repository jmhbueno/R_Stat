library(GPArotation)
library(corrplot)
library(janitor)
library(pander)
library(knitr)
library(kableExtra)
library(expss)
library(readxl)
library(readr)
ggplot(dataset, aes(x = country, y = bai_sum)) +
geom_point(stat = "summary",fun = "mean",na.rm = TRUE)
# outra forma de construir o mesmo gráfico
ggplot(dataset, aes(x = country, y = bai_sum)) +
stat_summary(geom = "point", fun = "mean")
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", size = 3) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.3)
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", na.rm = TRUE) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.3) +
coord_cartesian(ylim = c(0,12))
# Barrinha de intervalo de confiança
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", na.rm = TRUE) +
geom_errorbar(stat = "summary", fun.data = "mean_ci", width = 0.3, na.rm = TRUE) +
coord_cartesian(ylim = c(5,12))
# install.packages("pacman")
pacman::p_load(ggpubr) # ggpubr é um pacote que adiciona algumas funções ao ggplot
# Barrinha de intervalo de confiança
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", na.rm = TRUE) +
geom_errorbar(stat = "summary", fun.data = "mean_ci", width = 0.3, na.rm = TRUE) +
coord_cartesian(ylim = c(5,12))
# Barrinha de desvio padrão
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", na.rm = TRUE) +
geom_errorbar(stat = "summary", fun.data = "mean_sd", width = 0.3, na.rm = TRUE) +
coord_cartesian(ylim = c(0,20))
hist(distnorm, breaks = 50)
distnorm %>%
ggplot()+
geom_histogram()
distnorm
distnorm %>% as.data.frame()
hist(distnorm,
color = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
hist(distnorm,
color = "blue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm), add = TRUE))
distnorm <- rnorm(100000, mean = 10, sd = 2)
mean(distnorm)
sd(distnorm)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm), add = T)
distnorm %>%
ggplot()+
geom_histogram()
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = 50)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
xlab = "Escores",
ylab = "Frequência",
breaks = "sturges")
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
freq = F,
xlab = "Escores",
ylab = "Frequência",
breaks = "sturges")
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
freq = F,
xlab = "Escores",
ylab = "Frequência",
breaks = 20)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
freq = F,
xlab = "Escores",
ylab = "Frequência",
breaks = 20)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
hist(distnorm,
col = "lightblue",
main = "Distribuição Normal",
freq = F,
xlab = "Escores",
ylab = "Frequência",
breaks = 21)
curve(dnorm(x, mean = mean(distnorm), sd = sd(distnorm)), add = TRUE)
glimpse(distnorm)
distnorm1 <- data.frame(escores=rnorm(100000,10,2))
glimpse(distnorm1)
ggplot(distnorm1) +
geom_histogram(aes(x = escores))
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink")
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "blck")
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black")
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 0.5,
)
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 0.5,
bins = 50
)
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 0.2,
bins = 50) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 1,
bins = 50) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 2,
bins = 50) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1) +
geom_histogram(aes(x = escores),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1) +
geom_histogram(aes(x = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1) +
geom_histogram(aes(y = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1, aes(x = escores)) +
geom_histogram(aes(y = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1, aes(x = escores)) +
geom_histogram(aes(y = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list())
ggplot(distnorm1, aes(x = escores)) +
geom_histogram(aes(y = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list(mean = mean(distnorm1$escores), sd = sd(distnorm1$escores)))
ggplot(distnorm1, aes(x = escores)) +
geom_histogram(aes(y = ..density..),
fill = "pink",
color = "black",
alpha = 1,
bins = 25) +
stat_function(fun = dnorm, args = list(mean = mean(distnorm1$escores), sd = sd(distnorm1$escores))) +
labs(title = "Distribuição Normal",
x = "Escores",
y = "Densidade")
library(tidyverse)
library(pander)
library(janitor)
library(psych)
library(knitr)
library(arsenal)
ggplot(dataset, aes(x=age, y=bai_sum)) +
geom_point(color = "#9e2a2b") +
labs(title = "Idade x Ansiedade",
x = "Idade", y = "Ansiedade (BAI)")
median_boxplot
## Gráfico
### camada 1
ggplot() +
geom_boxplot(data = dataset,
mapping = aes(x = country, y = bai_sum, fill = country),
show.legend = FALSE,
na.rm = TRUE) +
### camada 2
geom_text(data = median_boxplot,
aes(x = country,
y = mediana,
label = format(mediana, digits = 1, nsmall = 1)),
fontface = "bold", size = 4, vjust = -.5) +
### camada 3
labs(title = "Boxplots BAI por país",
x = "Países",
y = "Ansiedade_BAI") +
### camada 4
theme_bw()
# Gráfico simples
ggplot(dataset, aes(x = country, y = bai_sum)) +
geom_point(stat = "summary",fun = "mean",na.rm = TRUE)
# outra forma de construir o mesmo gráfico
ggplot(dataset, aes(x = country, y = bai_sum)) +
stat_summary(geom = "point", fun = "mean")
# "Gráfico simples" + Barra de erro + Ajuste das dimensões
ggplot(dataset,aes(x = country, y = bai_sum)) +
geom_point(stat = "summary", fun = "mean", na.rm = TRUE) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.3) +
coord_cartesian(ylim = c(0,12))
tabcont_sex_country
tabcont_sex_country <- table(dataset$sex,     # linhas
dataset$country) # colunas
tabcont_sex_country
chi_sex_country
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%     # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
corr.test(big_five[,59:63], method = "kendal")
corr.test(big_five[,59:63], method = "spearman")
# obter matriz de correlações com a função corr.test(), do pacote psych
matriz_psych <- corr.test(big_five[,59:63], method = "spearman")
matriz_psych$r
# obter matriz de correlações com a função corr.test(), do pacote psych
matriz_psych <- corr.test(big_five[,59:63], method = "pearson")
# matriz completa (correlações entre todas as variáveis)
matriz_comp <- corr.test(dataset[,c(3,89,92)])
matriz_comp
matriz_parc
summary(matriz_comp)
matriz_comp
matriz_parc
## Visualização somente das correlações
matriz_comp$r
## Visualização somente das correlações
matriz_parc$r
matriz_comp
ggplot(dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title ="Correlação entre Depressão e Ansiedade",
x = "Depressão",
y = "Ansiedade") +
theme_classic()
# matriz de correlações usando o corrplot
corrplot::corrplot(matriz_psych$r,
method = "shade",
type = "lower",
order = "hclust",
addCoef.col = TRUE)
mod2 <-
mod_ans_dep <- lm(data = dataset,       # onde estão os dados
bai_sum ~ bdi_sum,    # depressão predizendo ansiedade
na.action = na.omit)  # ignorar NAs
summary(mod_ans_dep)
readRDS("big_five.rds")
# rodando a regressão (usando a função lm() do pacote stats (básico do R)
# lm vem de linear model
mod <- lm(idade ~ extr+neur+amab+cons+aber, # big-five predizendo idade
data=big_five_BR,                 # onde estão os dados
na.action = na.omit)              # ignorar NAs
## Interpretação do modelo
summary(mod)
mod$coefficients %>% as.data.frame()
mod$coefficients %>% as.data.frame() %>% pander()
mod$coefficients %>% as.data.frame() %>% kable()
library(tidyverse)
library(psych)
library(arsenal)
# library(rstatix)
# library(GPArotation)
library(corrplot)
library(janitor)
library(pander)
library(knitr)
names(big_five)
big_five %>% select(8:58) %>% KMO()
big_five %>% select(8:58)
big_five %>% select(8:58) %>% KMO(na.rm = TRUE)
big_five %>% select(9:58) %>% KMO()
big_five %>% select(9:58) %>% bartlett.test()
big_five %>% select(9:58) %>% scree()
big_five %>% select(9:58) %>%
scree(pc = FALSE) # extrair fatores, não extrair componentes
big_five %>% select(9:58) %>%
fa.parallel()
big_five %>% select(9:58) %>%
fa.parallel(poly = TRUE)
big_five %>% select(9:58) %>%
fa.parallel(cor = "poly")
big_five %>% select(9:58) %>%
fa.parallel()
parallel_bigfive <- big_five %>% select(9:58) %>% fa.parallel()
parallel_bigfive$fa.values
parallel_bigfive$fa.values[,1:10]
parallel_bigfive$fa.values[1:10,]
data.frame(exp = parallel_bigfive$fa.values %>% as.data.frame,
ale = parallel_bigfive$fa.sim %>% as.data.frame)
data.frame("exp" = parallel_bigfive$fa.values %>% as.data.frame,
"ale" = parallel_bigfive$fa.sim %>% as.data.frame)
data.frame("exp" = c(parallel_bigfive$fa.values %>% as.data.frame),
"ale" = parallel_bigfive$fa.sim %>% as.data.frame)
data.frame("exp" = c(parallel_bigfive$fa.values %>% as.data.frame),
"ale" = c(parallel_bigfive$fa.sim %>% as.data.frame))
data.frame("exp" = parallel_bigfive$fa.values %>% as.data.frame,
"ale" = parallel_bigfive$fa.sim %>% as.data.frame)
data.frame("exp" = as.data.frame(parallel_bigfive$fa.values),
"ale" = parallel_bigfive$fa.sim %>% as.data.frame)
data.frame("exp" = as.data.frame(parallel_bigfive$fa.values),
"ale" = as.data.frame(parallel_bigfive$fa.sim))
as.data.frame(parallel_bigfive$fa.values)
data.frame(as.data.frame(parallel_bigfive$fa.values),
as.data.frame(parallel_bigfive$fa.sim))
data.frame(as.data.frame(parallel_bigfive$fa.values),
as.data.frame(parallel_bigfive$fa.sim)) %>% pander()
fa_big_five <- big_five %>% select(9:58) %>% fa(nfactors = 5, rotate = geominQ)
big_five %>% select(9:58) %>% fa(nfactors = 5, rotate = "geominQ", fm = "uls")
fa_big_five <- big_five %>% select(9:58) %>% fa(nfactors = 5,
rotate = "geominQ",
fm = "uls")
# para visualizar as cargas fatoriais
fa_big_five$loadings
# para visualizar as cargas fatoriais
fa_big_five$loadings[>0.3]
# para visualizar as cargas fatoriais
fa_big_five$loadings[fa_big_five$loadings > .3]
# para visualizar as cargas fatoriais
summary(loadings)
# para visualizar as cargas fatoriais
summary(fa_big_five)
fa_big_five <- big_five %>% select(9:58) %>% fa(nfactors = 5,
rotate = "geominQ",
fm = "uls",
omega = TRUE)
fa_big_five
library(tidyverse)
library(psych)
library(arsenal)
# library(rstatix)
# library(GPArotation)
library(corrplot)
library(janitor)
library(pander)
library(knitr)
big_five %>% select(9:58) %>% fa.parallel()
data.frame(as.data.frame(parallel_bigfive$fa.values),
as.data.frame(parallel_bigfive$fa.sim)) %>% pander()
corrplot(big_five[,9:58])
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r,
method = "shade",
type = "lower",
order = "hclust",
addCoef.col = TRUE)
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r,
method = "shade",
type = "lower",
order = "alphabet",
addCoef.col = F)
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r,
method = "shade",
type = "lower",
order = "alphabet",
addCoef.col = FALSE)
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r)
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r)
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r, type = "lower")
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r, order = "original", type = "lower")
# matriz de correlações usando o corrplot
corrplot::corrplot(corr.test(big_five[,9:58])$r, order = "original", type = "lower",
title = "Correlação entre os itens - big_five")
# para visualizar as cargas fatoriais
summary(fa_big_five)
big_five %>% select(9:18) %>% omega(poly = TRUE)
big_five %>% select(19:28) %>% omega(poly = TRUE)
big_five %>% select(29:38) %>% omega(poly = TRUE)
big_five %>% select(39:48) %>% omega(poly = TRUE)
big_five %>% select(49:58) %>% omega(poly = TRUE)
rely_E <- big_five %>% select( 9:18) %>% omega(poly = TRUE, digits = 2)
rely_N <- big_five %>% select(19:28) %>% omega(poly = TRUE, digits = 2)
rely_A <- big_five %>% select(29:38) %>% omega(poly = TRUE, digits = 2)
rely_C <- big_five %>% select(39:48) %>% omega(poly = TRUE, digits = 2)
rely_O <- big_five %>% select(49:58) %>% omega(poly = TRUE, digits = 2)
data.frame(Fatores = c('Extroversão',
'Neuroticismo',
'Amabilidade',
'Conscienciosidade',
'Abertura'),
Alfa = c(rely_E$alpha,
rely_N$alpha,
rely_A$alpha,
rely_C$alpha,
rely_O$alpha),
Omega = c(rely_E$omega.tot,
rely_N$omega.tot,
rely_A$omega.tot,
rely_C$omega.tot,
rely_O$omega.tot))
data.frame(Fatores = c('Extroversão',
'Neuroticismo',
'Amabilidade',
'Conscienciosidade',
'Abertura'),
Alfa = c(rely_E$alpha,
rely_N$alpha,
rely_A$alpha,
rely_C$alpha,
rely_O$alpha),
Omega = c(rely_E$omega.tot,
rely_N$omega.tot,
rely_A$omega.tot,
rely_C$omega.tot,
rely_O$omega.tot)) %>% pander()
# matriz de correlações usando o corrplot
corrplot::corrplot(matriz_psych$r,
method = "shade",
type = "lower",
order = "hclust",
addCoef.col = TRUE)
# matriz de correlações usando o corrplot
corrplot::corrplot(matriz_comp$r,
method = "shade",
type = "lower",
order = "hclust",
addCoef.col = TRUE)
mod$coefficients %>% as.data.frame() %>% pander()
