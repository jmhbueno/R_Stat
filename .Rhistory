despd_ans = round(  sd(bai_sum, na.rm = TRUE),digits=2),
média_dep = round(mean(bdi_sum, na.rm = TRUE),digits=2),
despd_dep = round(  sd(bdi_sum, na.rm = TRUE),digits=2)) %>% as.data.frame()
data.frame(variables = c('média_ans','despd_ans','média_dep','despd_dep'),
values = c(round(mean(bai_sum, na.rm = TRUE),digits=2),
round(  sd(bai_sum, na.rm = TRUE),digits=2),
round(mean(bdi_sum, na.rm = TRUE),digits=2),
round(  sd(bdi_sum, na.rm = TRUE),digits=2)))
data.frame(variables = c('média_ans','despd_ans','média_dep','despd_dep'),
values = c(round(mean(dataset$bai_sum, na.rm = TRUE),digits=2),
round(  sd(dataset$bai_sum, na.rm = TRUE),digits=2),
round(mean(dataset$bdi_sum, na.rm = TRUE),digits=2),
round(  sd(dataset$bdi_sum, na.rm = TRUE),digits=2)))
tab_ggansdep <-
data.frame(variables = c('média_ans','despd_ans','média_dep','despd_dep'),
values = c(round(mean(dataset$bai_sum, na.rm = TRUE),digits=2),
round(  sd(dataset$bai_sum, na.rm = TRUE),digits=2),
round(mean(dataset$bdi_sum, na.rm = TRUE),digits=2),
round(  sd(dataset$bdi_sum, na.rm = TRUE),digits=2)))
ggplot(ggansdep, aes(x=variables, y=values)) +
geom_point(color = "#9e2a2b",size = 4) +
geom_line(group = 1,linetype = "dashed") +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(tab_ggansdep, aes(x=variables, y=values)) +
geom_point(color = "#9e2a2b",size = 4) +
geom_line(group = 1,linetype = "dashed") +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_point(color = "#9e2a2b",size = 4) +
geom_line(group = 1,linetype = "dashed") +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_point(stat = summary, fun = "mean", color = "#9e2a2b",size = 4) +
geom_line(group = 1,linetype = "dashed") +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(color = "#9e2a2b",size = 4) +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 4) +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 1) +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 1,na.rm = TRUE) +
labs(title = "ANOVA POR MEDIDAS REPETIDAS",
x = "Medidas Repetidas",
y = "Médias",
caption = 'OBS: Gráfico construído com base em dados simulados',
tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 1,na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'NEAP',
tag = "Estatística no R")
# tag = "Estatística no R")
ggplot(dataset, aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 1,na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "#9e2a2b",size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "blue",size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = "black",size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = sex, size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = 'sex', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",color = 'black', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "mean_se",color = 'black', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",fun = mean_se, color = 'black', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary", color = 'black', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary", fun = mean, color = 'black', size = 1) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary", fun = mean, color = 'black', size = 1, na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
library(tidyverse)
library(psych)
library(arsenal)
# library(rstatix)
# library(GPArotation)
library(corrplot)
library(janitor)
library(pander)
library(knitr)
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum), fill = country) +
geom_bar(stat = "summary",
fun = mean,
color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum), fill = sex) +
geom_bar(stat = "summary",
fun = mean,
color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum), fill = sex) +
geom_bar(stat = "summary",
fun = mean,
# color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",
fun = mean,
fill = sex,
color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot() +
geom_bar(aes(x=sex, y=bai_sum),stat = "summary",
fun = mean,
fill = sex,
color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
dataset %>% drop_na(sex) %>%
ggplot(aes(x=sex, y=bai_sum)) +
geom_bar(stat = "summary",
fun = mean,
color = 'black',
size = 1,
na.rm = TRUE) +
labs(title = "DEPRESSÃO X SEXO",
x = "SEXO",
y = "DEPRESSÃO",
caption = 'Estatística no R',
tag = "NEAP")
aov(bai_sum ~ country, dataset)
aov(bdi_sum ~ country, dataset)
aov_ans_país <- aov(bai_sum ~ country, dataset)
aov_dep_país <- aov(bdi_sum ~ country, dataset)
# visualização dos resultados
summary(aov_ans_país)
summary(aov_dep_país)
df_ex
df_ex <- data.frame(id = paste("s",1:80,sep = ""),
v1 = round(rnorm(n=80, mean = 20, sd = 3),digits = 2),
v2 = round(rnorm(n=80, mean = 22, sd = 3),digits = 2),
v3 = round(rnorm(n=80, mean = 26, sd = 3),digits = 2),
v4 = round(rnorm(n=80, mean = 27, sd = 3),digits = 2),
v5 = round(rnorm(n=80, mean = 27, sd = 3),digits = 2))
df_ex
df_ex_wide <- pivot_longer(cols = 2:6, # variáveis a serem unidas em uma só.
names_to = "medidas", # nome dessa nova variável
values_to = "valores") # valores correspondentes à nova variável
pivot_longer(cols = 2:6, # variáveis a serem unidas em uma só.
names_to = "medidas", # nome dessa nova variável
values_to = "valores")
df_ex_wide <- df_ex %>% pivot_longer(cols = 2:6, # variáveis a serem unidas em uma só.
names_to = "medidas", # nome dessa nova variável
values_to = "valores") # valores correspondentes à nova variável
df_ex_wide
df_ex$id <- factor(df_ex$id)
df_ex$medidas <- factor(df_ex$tempo)
df_ex_wide
df_ex_longer <- df_ex %>% pivot_longer(cols = 2:6, # variáveis a serem unidas em uma só.
names_to = "medidas", # nome dessa nova variável
values_to = "valores") # valores correspondentes à nova variável
df_ex_longer$id <- factor(df_ex$id)
df_ex_longer$medidas
df_ex_longer <- df_ex %>% pivot_longer(cols = 2:6, # variáveis a serem unidas em uma só.
names_to = "medidas", # nome dessa nova variável
values_to = "valores") # valores correspondentes à nova variável
df_ex_longer$id <- factor(df_ex_longer$id)
df_ex_longer$medidas <- factor(df_ex_longer$medidas)
glimpse(df_aov1)
glimpse(df_ex_longer)
ez::ezANOVA(data = df_ex_longer,    # banco de dados no formato longo
dv = valores,             # variável dependente
wid = id,                 # variável que identifica os sujeitos
within = medidas,           # variável intra-sujeitos
detailed = TRUE,          # saída mais detalhada
type = 3)
mod_df_ex_longer <- ez::ezANOVA(data = df_ex_longer,    # banco de dados no formato longo
dv = valores,             # variável dependente
wid = id,                 # variável que identifica os sujeitos
within = medidas,           # variável intra-sujeitos
detailed = TRUE,          # saída mais detalhada
type = 3)                 # tipo de soma dos quadrados, default 2
glimpse(dataset)
# Cálculo do qui-quadrado
# Primeiro passo: criar a tabela de contingência
table(dataset$bai_class, dataset$sex)
# padronizar a ordem dos níveis: minima, leve, moderada, grave.
dataset$bdi_class <- factor(dataset$bdi_class,
levels = c("minima",
"leve",
"moderada",
"grave"))
# Cálculo do qui-quadrado
# Primeiro passo: criar a tabela de contingência
table(dataset$bai_class, dataset$sex)
chisq.test(                               # função para cálculo do qui-quadrado
table(dataset$bai_class, dataset$sex))  # tabulação dos dados
# Representação dos dados em tabela
dataset %>%
tabyl(bai_class,sex,show_na = FALSE) %>%   # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
dataset$bdi_class <- factor(dataset$bdi_class,
levels = c("minima",
"leve",
"moderada",
"grave"))
table(dataset$bdi_class, dataset$sex)
# padronizar a ordem dos níveis: minima, leve, moderada, grave.
dataset$bai_class <- factor(dataset$bai_class,
levels = c("minima",
"leve",
"moderada",
"grave"))
chisq.test(                               # função para cálculo do qui-quadrado
table(dataset$bai_class, dataset$sex))  # tabulação dos dados
# Representação dos dados em tabela
dataset %>%
tabyl(bai_class,sex,show_na = FALSE) %>%   # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
# Representação dos dados em tabela
dataset %>%
tabyl(bdi_class,sex,show_na = FALSE) %>%   # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
chisq.test(table(dataset$bdi_class, dataset$sex))
# Cálculo do qui-quadrado
chisq.test(                               # função para cálculo do qui-quadrado
table(dataset$bai_class, dataset$country))  # tabulação dos dados
# Representação dos dados em tabela
dataset %>%
tabyl(bai_class,country,show_na = FALSE) %>%   # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
chisq.test(table(dataset$bdi_class, dataset$country))
# Representação dos dados em tabela
dataset %>%
tabyl(bdi_class,country,show_na = FALSE) %>%   # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
glimpse(rwas)
glimpse(rwas_u)
glimpse(rwas_us)
names(rwas_us)
rwas_us %>% select(extr,neur,amab,cons,aber) %>% corr.test(method = "pearson")
rwas %>% filter(country == "BR")
names(rwas)
rwas %>% filter(IP_country == "BR")
rwas_br <- rwas %>% filter(IP_country == "BR")
glimpse(rwas_br)
names(rwas_us)
corr.test(rwas[,91:95],rwas[,c(96,97)])
pairs.panels(rwas[,c('extr','neur','amab','cons','aber')])
corr.test(rwas_us[,91:95],rwas[,c(96,97)])
corr.test(rwas_us[,91:95],rwas_us[,c(96,97)])
pairs.panels(rwas_us[,c('extr','neur','amab','cons','aber')])
ggplot(rwas_us, aes(x=extr,y=neur)) +
geom_jitter()
ggplot(rwas_us, aes(x=extr,y=neur)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(rwas_us, aes(x=extr,y=neur)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title ="Correlação entre Extroversão e Neuroticismo",
x = "Extroversão",
y = "Neuroticismo") +
theme_classic()
corr.test(rwas[,91:95])
corr.test(rwas_us[,91:95])
matriz_bigfive <- corr.test(rwas_us[,91:95])
matriz_bigfive$r
corrplot::corrplot(matriz_bigfive$r,
order = "original",
type = "lower",
title = "Correlação entre os fatores bif five")
names(rwas_us)
matriz_bigfive <- corr.test(rwas[,91:95])
corrplot::corrplot(matriz_bigfive$r,
order = "original",
type = "lower",
title = "Correlação entre os fatores bif five")
corr.test(rwas_us[,91:95])$r
corr.test(rwas_us[,91:95])
corr.test(rwas_us[,91:95])$r
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "lower",
title = "Correlação entre os fatores bif five")
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "lower",
title = "Correlação entre os fatores bif five")
### Gráfico em apenas uma etapa
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "upper",
title = "Correlação entre os fatores bif five")
### Gráfico em apenas uma etapa
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "both",
title = "Correlação entre os fatores bif five")
### Gráfico em apenas uma etapa
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "full",
title = "Correlação entre os fatores bif five")
### Gráfico em apenas uma etapa
corrplot::corrplot(corr.test(rwas_us[,91:95])$r,
order = "original",
type = "lower",
title = "Correlação entre os fatores bif five")
names(rwas_us)
mod_rwas_us <- lm(auth ~ extr+neur+amab+cons+aber+rv,
data=rwas_us,
na.action = na.omit)
summary(mod_rwas_us)
## Primeiro pass: verificar se há homogeneidade de variâncias
car::leveneTest(bai_sum ~ sex, dataset, center=mean)
## Segundo passo: calcular o t-teste
t.test(bai_sum ~ sex, dataset, var.equal = FALSE)
## Tamanho de efeito
effsize::cohen.d(bai_sum ~ sex, data = dataset)
# Primeiro passo: verificar se há homogeneidade de variâncias
car::leveneTest(bdi_sum ~ sex, dataset, center=mean)
## Primeiro passo: verificar se há homogeneidade de variâncias
car::leveneTest(bai_sum ~ sex, dataset, center=mean)
# Primeiro passo: verificar se há homogeneidade de variâncias
car::leveneTest(bdi_sum ~ sex, dataset, center=mean)
## Segundo passo: calcular o t-teste
t.test(bdi_sum ~ sex, dataset, var.equal = TRUE)
## Terceiro passo: Cálculo do tamanho de efeito
effsize::cohen.d(bdi_sum ~ sex, data = dataset)
aov_ans_país <- aov(bai_sum ~ country, dataset)
aov_dep_país <- aov(bdi_sum ~ country, dataset)
# visualização dos resultados
summary(aov_ans_país)
summary(aov_dep_país)
dataset %>% group_by(country) %>% summarise(ansiedade = mean(bai_sum),
depressão - mean(bdi_sum))
dataset %>% group_by(country) %>% mean(bai_sum)
dataset %>% group_by(country) %>% summarise(média = mean(bai_sum))
dataset %>% group_by(country) %>% summarise(média = mean(bai_sum, na.rm = TRUE))
dataset %>% group_by(country) %>% summarise(ansiedade = mean(bai_sum, na.rm = TRUE),
depressão = mean(bdi_sum, na.rm = TRUE))
# visualização dos resultados
summary(aov_ans_país)
summary(aov_dep_país)
dataset %>% group_by(country) %>% summarise(ansiedade = mean(bai_sum, na.rm = TRUE),
depressão = mean(bdi_sum, na.rm = TRUE))
