Pequeno = c(0.1,0.07,0.06),
Médio = c(0.3,0.21,0.17),
Grande = c(0.5,0.35,0.29)) %>% pander()
glimpsei(dataset)
glimpse(dataset)
new_alfa
data.frame("Graus de Liberdade" = c(1,2,3),
Pequeno = c(0.1,0.07,0.06),
Médio = c(0.3,0.21,0.17),
Grande = c(0.5,0.35,0.29)) %>% pander()
# Tamanho do efeito
# phi é usado para tabelas 2 x 2
# V de Cramer é usado para tabelas maiores
# usando a função cramer_v() do rstatix
rstatix::cramer_v(tabcont_sex_country)
corrplot::corrplot(chi_sex_country$stdres,  # função para representação em cores
is.corr = FALSE,         # não se trata de correlações
method = "color",        # método para pintar o quadrado todo.
tl.col = "black",        # textos na cor preta
tl.srt = 0)              # angulação das colunas, 90 é vertical.
corrplot::corrplot(chi_sex_country$stdres,  # função para representação em cores
is.corr = FALSE,         # não se trata de correlações
title = "Sexo x País"    # Titulo do gráfico
method = "color",        # método para pintar o quadrado todo.
tl.col = "black",        # textos na cor preta
tl.srt = 0)              # angulação das colunas, 90 é vertical.
corrplot::corrplot(chi_sex_country$stdres,  # função para representação em cores
is.corr = FALSE,         # não se trata de correlações
title = "Sexo x País",    # Titulo do gráfico
method = "color",        # método para pintar o quadrado todo.
tl.col = "black",        # textos na cor preta
tl.srt = 0)              # angulação das colunas, 90 é vertical.
dataset %>%
tabyl(country,sex, show_na = FALSE) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("all") %>%     # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
pander()                         # melhora a visualização dos dados.
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("all") %>%     # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
pander()                         # melhora a visualização dos dados.
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("col") %>%     # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
pander()                         # melhora a visualização dos dados.
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>%                 # adiciona o N
adorn_percentages("col") %>%                     # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                          # arredondar do cinco pra cima
digits = 0) %>%                                # número de casas decimais
adorn_ns() %>%                                   # mostra N e % juntas
pander()                                         # melhora a visualização dos dados.
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País", y = "Proporção", fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
# coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País", y = "Proporção", fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill", na.rm = TRUE) +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País", y = "Proporção", fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex), na.rm = TRUE) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País", y = "Proporção", fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex", na.rm = TRUE)
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção")
library(tidyverse)
library(psych)
library(pander)
library(knitr)
# Análise das frequências em cada categoria da VD
table(rwas_nona$believer)
summary(rwas_nona)
# Checar categoria de referência das variáveis categóricas
levels(rwas_nona$believer) # Atheist é a categoria de referência
levels(rwas_nona$sex)      # Male é a categoria de referência
glm(believer ~ extr+neur+cons+amab+aber+sex,
family = "binomial"(link = "logit"),
data = rwas_nona,
na.action = na.omit)
summary(mod_rlog1)
plot(mod_rlog1, which = 5)
summary(stdres(mod_rlog1))
## Overall effects
Anova(mod_rlog1, type = "II", test.statistic = "Wald")
library(tidyverse)
library(psych)
library(pander)
library(knitr)
names(dataset)
dataset$country
class(dataset$country)
distinct(dataset,country)
distinct(dataset,sex)
table(dataset$sex,dataset$country)
tabcont_sex_country <- table(dataset$sex,dataset$country)
chisq.test(tabcont_sex_country)
# Representação em tabela
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%   #função do pacote janitor
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
pander()
# Representação em tabela
library(janitor)
library(tidyverse)
library(pander)
library(janitor)
library(knitr)
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%   #função do pacote janitor
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
pander()
options(scipen = 999)
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%   #função do pacote janitor
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
pander()
chisq.test(tabcont_sex_country)
distinct(dataset,country)
distinct(dataset,sex)
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%   #função do pacote janitor
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
pander()
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
# Representação grafica
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
# coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
stats::chisq.test(tabcont_sex_country)
# 2º passo: calcular o qui-quadrado
chisq.test(tabcont_sex_country)
options(scipen = 0)
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%   #função do pacote janitor
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
pander()
# 2º passo: calcular o qui-quadrado
chisq.test(tabcont_sex_country)
names(dataset)
cor.test(dataset$bdi_sum,dataset$bai_sum, method = "pearson")
# correlação de Spearman (rho)
cor.test(dataset$bdi_sum,dataset$bai_sum, method = "spearman")
# correlação de kendall (rho)
cor.test(dataset$bdi_sum,dataset$bai_sum, method = "kendall")
names(dataset)
cor.teste(dataset[,c(3,89,92)])
cor.test(dataset[,c(3,89,92)])
corr.test(dataset[,c(3,89,92)])
corr.test(dataset[c(89,92)],dataset$age)
shapiro.test(dataset$bdi_sum)
hist(dataset$bdi_sum)
hist(dataset$age)
hist(dataset$age,breaks = 20 )
hist(dataset$age,breaks = 30 )
hist(dataset$age,breaks = 30 )
hist(dataset$age,breaks = 25 )
shapiro.test(dataset$age)
shapiro.test(dataset$bai_sum)
skew(dataset$age)
kurtosi(dataset$age)
names(big_five)
hist(big_five$extr)
shapiro.test(big_five$extr)
big_five %>% slice(3000) %>%
shapiro.test(extr)
shapiro.test(big_five_BR$extr)
hist(big_five_BR$extr)
skew(big_five_BR$extr)
names(big_five)
corr.test(big_five[,59:63])
corr.test(big_five[,59:63],big_five$idade)
ggplot(dataset, aes(x=bdi_sum,y=bai_sum)) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(title ="Correlação entre Depressão e Ansiedade",
x = "Depressão",
y = "Ansiedade") +
theme_classic()
library(tidyverse)
library(pander)
library(janitor)
library(psych)
library(knitr)
library(arsenal)
library(psych)
table(dataset$sex,dataset$country)
table(dataset$sex,dataset$country, dataset$bdi_class)
tabcont_sex_country
chisq.test(tabcont_sex_country)
data.frame("Graus de Liberdade" = c(1,2,3),
Pequeno = c(0.1,0.07,0.06),
Médio = c(0.3,0.21,0.17),
Grande = c(0.5,0.35,0.29)) %>% pander()
dataset %>%
tabyl(sex,country,show_na = FALSE) %>%     # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "stack") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
ggplot(dataset, aes(x = country, fill = bai_class)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
ggplot(dataset, aes(x = country, fill = sex)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x País",
x = "País",
y = "Proporção",
fill = "Sex")
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = ..prop.., # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black") +      # cor da borda das barras
## Camada 2 - colocar eixo y em porcentagem
scale_y_continuous(labels = scales::percent_format()) +
## Camada 3 - colocar o valor das porcentagens nas barras
geom_text(aes(label = scales::percent(..prop..),
y = ..prop..),
stat = "count",
color = "white",
size = 5,
position = position_stack(vjust = 0.5)) +
## Camada 4 - Titulos, labels
labs(x = "País",
y = "Porcentagem",
title = "Número de participantes por país",
subtitle = "Brasil, Portugal e Espanha",
caption = "Núcleo de Estudos em Avaliação Psicológica - NEAP")
# Gráfico mais simples possível (contagem simples)
ggplot(dataset, aes(x = country)) +
geom_bar(color = "black", fill = "dodgerblue")
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = ..prop.., # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black")
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = sex, # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black")
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = ..prop.., # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black")
# Gráfico mais simples possível (contagem simples)
ggplot(dataset, aes(x = country)) +
geom_bar(color = "black", fill = "dodgerblue")
# Gráfico de barras mais complexo (4)
## Camada 1 - gráfico de barras com algumas melhorias visuais
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = ..prop.., # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black") +      # cor da borda das barras
## Camada 2 - colocar eixo y em porcentagem
scale_y_continuous(labels = scales::percent_format()) +
## Camada 3 - colocar o valor das porcentagens nas barras
geom_text(aes(label = scales::percent(..prop..),
y = ..prop..),
stat = "count",
color = "white",
size = 5,
position = position_stack(vjust = 0.5)) +
## Camada 4 - Titulos, labels
labs(x = "País",
y = "Porcentagem",
title = "Número de participantes por país",
subtitle = "Brasil, Portugal e Espanha",
caption = "Núcleo de Estudos em Avaliação Psicológica - NEAP")
# Gráfico de barras empilhadas (utilizando o geom_col)
# OBS.: O geom_col é parecido com o geom_bar, mas o primeiro só aceita dados diretos.
# Por isso, nesse caso, é preciso preparar o dataframe antes.
## Preparação do data frame
dataset %>%
count(country) %>%
mutate(pct = n/sum(n)) %>%
## Camada 1
ggplot(.,aes(x = "",
y = pct,
fill = country)) + # se o argumento fill for colocado dentro de aes, sai uma cor por barra
geom_col(color = "black") +
## Camada 2
geom_text(aes(label = scales::percent(round(pct,3))),
position = position_stack(vjust = 0.5)) +
## Camada 3
labs(title = "Proporção de participantes por país")
# Gráfico mais simples possível (contagem simples)
ggplot(dataset, aes(x = country)) +
geom_bar(color = "black", fill = "dodgerblue")
# Gráfico de barras mais complexo (4)
## Camada 1 - gráfico de barras com algumas melhorias visuais
ggplot(data = dataset,             # base de dados
mapping = aes(x = country,  # informação que vai no eixo x
y = ..prop.., # informação que vai no eixo y: forma de indicar que é a proporção
group = 1)) +
geom_bar(stat = "count",         # definir que a estatística parte da contagem
fill = "dodgerblue4",   # cor das barras
width = .5,             # espessura das barras
color = "black") +      # cor da borda das barras
## Camada 2 - colocar eixo y em porcentagem
scale_y_continuous(labels = scales::percent_format()) +
## Camada 3 - colocar o valor das porcentagens nas barras
geom_text(aes(label = scales::percent(..prop..),
y = ..prop..),
stat = "count",
color = "white",
size = 5,
position = position_stack(vjust = 0.5)) +
## Camada 4 - Titulos, labels
labs(x = "País",
y = "Porcentagem",
title = "Número de participantes por país",
subtitle = "Brasil, Portugal e Espanha",
caption = "Núcleo de Estudos em Avaliação Psicológica - NEAP")
# Gráfico de barras empilhadas (utilizando o geom_col)
# OBS.: O geom_col é parecido com o geom_bar, mas o primeiro só aceita dados diretos.
# Por isso, nesse caso, é preciso preparar o dataframe antes.
## Preparação do data frame
dataset %>%
count(country) %>%
mutate(pct = n/sum(n)) %>%
## Camada 1
ggplot(.,aes(x = "",
y = pct,
fill = country)) + # se o argumento fill for colocado dentro de aes, sai uma cor por barra
geom_col(color = "black") +
## Camada 2
geom_text(aes(label = scales::percent(round(pct,3))),
position = position_stack(vjust = 0.5)) +
## Camada 3
labs(title = "Proporção de participantes por país")
table(dataset$sex,dataset$bai_class)
summary(dataset$bai_class)
dataset$bai_class <- factor(dataset$bai_class,
levels = c("minima",
"leve",
"moderada",
"grave"))
table(dataset$sex,dataset$bai_class)
chisq.test(table(dataset$sex,dataset$bai_class))
# qui-quadrado (depressão)
chisq.test(table(dataset$sex,dataset$bdi_class))
## tabela
dataset %>%
tabyl(sex,bai_class,show_na = FALSE) %>%     # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
ggplot(dataset,
aes(x = country, fill = bai_class)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x Ansiedade",
x = "Sexo",
y = "Ansiedade",
fill = "Ansiedade")
ggplot(dataset,
aes(x = sex, fill = bai_class)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x Ansiedade",
x = "Sexo",
y = "Ansiedade",
fill = "Ansiedade")
## gráfico
dataset %>% drop_na %>%
ggplot(aes(x = sex, fill = bai_class)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x Ansiedade",
x = "Sexo",
y = "Ansiedade",
fill = "Ansiedade")
### gráfico
dataset %>% drop_na %>%
ggplot(aes(x = sex, fill = bdi_class)) +
geom_bar(position = "fill") +
coord_flip() +
labs(title = "Proporção Sexo x Ansiedade",
x = "Sexo",
y = "Ansiedade",
fill = "Ansiedade")
dataset %>%
tabyl(sex,bdi_class,show_na = FALSE) %>%     # função de tabulação do janitor
adorn_totals(c("row","col")) %>%           # adiciona o N
adorn_percentages("col") %>%               # adiciona porcentagens (One of "row", "col", or "all".)
adorn_pct_formatting(
rounding = "half up",                    # arredondar do cinco pra cima
digits = 0) %>%                          # número de casas decimais
adorn_ns() %>%                             # mostra N e % juntas
pander()                                   # melhora a visualização dos dados.
