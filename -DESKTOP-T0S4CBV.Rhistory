big_five_BR
RVAideMemoire::byf.shapiro(extr ~ gênero, big_five_BR)
nrow(big_five_BR)
RVAideMemoire::byf.shapiro(extr ~ "gênero", big_five_BR)
RVAideMemoire::byf.shapiro(extr ~ gênero, data = big_five_BR)
big_five_BR %>% dplyr::select(extr) %>% RVAideMemoire::byf.shapiro(~ gênero)
# verificação da normalidade dos dados, separado por grupos.
# vamos usar o pacote RVAideMemoire
library(RVAideMemoire)
byf.shapiro(extr ~ gênero, data = big_five_BR)
view(big_five_BR)
byf.shapiro(extr ~ gênero, big_five_BR)
is.numeric(big_five_BR$extr)
byf.shapiro(extr~gênero,data=big_five_BR)
rename(big_five_BR, genero = gênero)
big_five_BR <- rename(big_five_BR, genero = gênero)
big_five_BR
byf.shapiro(extr~genero,data=big_five_BR)
byf.shapiro(extr~genero,data=big_five_BR, na.rm = TRUE)
byf.shapiro(extr~genero,data=big_five_BR, na.action = na.omit)
byf.shapiro(extr~genero,data=big_five_BR, na.action = na.omit)
data <- big_five_BR %>% filter(!genero == NA)
count(data,genero)
data
big_five_BR %>% filter(!genero == NA)
big_five_BR
big_five_BR$genero
is.na(big_five_BR$genero)
big_five_BR %>% filter(!genero == NA)
big_five_BR %>% filter(!genero == "NA")
data <- big_five_BR %>% filter(!genero == "NA")
byf.shapiro(extr~genero,data=data)
data
rm(data)
glimpse(big_five_BR)
nros(big_five_BR$genero)
nrow(big_five_BR$genero)
nrow(big_five_BR$extr)
byf.shapiro(extr~genero,big_five_BR)
byf.shapiro(neur~genero,big_five_BR)
big_five_BR <- rename(big_five_BR, gênero = genero)
big_five_BR
dataset
byf.shapiro(bai_sum ~ sex, dataset)
glimpse(dataset)
names(dataset)
dataset1 <- dataset %>% mutate(vnova = rowMeans(c(67:87)))
rlang::last_error()
dataset1 <- dataset
dataset1$vnova <- dataset1 %>% dplyr::select(67:87) %>% rowMeans()
dataset1
glimpse(dataset1)
byf.shapiro(vnova ~ sex, dataset1)
big_five_BR
# primeiro passo: trasnformar a categoria "outros" em NA
big_five_br <- big_five %>% dplyr::filter(país == "BR")
names(big_five_br)
byf.shapiro(neur~gênero,big_five_br)
rlang::last_error()
glimpse(big_five_BR)
rm(dataset1)
rm(big_five_br)
shapiro.test(big_five_BR$extr)
big_five_BR %>% select(extr) %>% dplyr::group_by(gênero) %>% shapiro.test()
big_five_BR %>% select("extr") %>% dplyr::group_by(gênero) %>% shapiro.test()
big_five_BR %>% dplyr::select("extr") %>% dplyr::group_by(gênero) %>% shapiro.test()
byf.shapiro(neur~gênero,big_five_br)
rlang::last_error()
big_five_BR
big_five_BR %>% dplyr::select("extr") %>% dplyr::group_by("gênero") %>% shapiro.test()
is.numeric(big_five_BR$gênero)
is.numeric(big_five_BR$extr)
is.numeric(dataset$sex)
view(big_five_BR)
count(dataset,sex)
count(big_five_BR,gênero)
big_five_BR %>% dplyr::select("extr") %>% dplyr::filter(!gênero == NA) %>% dplyr::group_by("gênero") %>% shapiro.test()
rlang::last_error()
big_five_nona <- big_five_BR %>% filter(!gênero == NA)
nrow(big_five_nona)
glimpse(big_five_nona)
big_five_nona <- big_five_BR %>% filter(gênero == "Masculino" | gênero == "Feminino")
byf.shapiro(neur~gênero,big_five_nona)
big_five_nona
glimpse(big_five_nona)
byf.shapiro(extr ~ gênero,big_five_nona)
count(big_five_nona,gênero)
is.na(big_five_nona$extr) %>% count()
is.na(big_five_nona$extr)
RVAideMemoire::byf.shapiro(formula = extr ~ gênero, data = big_five_nona)
RVAideMemoire::byf.shapiro(formula = extr ~ gênero, data = big_five_nona[0:175,])
RVAideMemoire::byf.shapiro(formula = gênero ~ extr, data = big_five_nona)
RVAideMemoire::byf.shapiro(formula = extr ~ gênero, data = big_five_nona)
shapiro.test(extr, big_five_nona)
shapiro.test(big_five_nona$extr)
big_five_nona %>% dplyr::group_by(gênero) %>% shapiro.test(big_five_nona$extr)
lirary(tidyverse)
library(tidyverse)
big_five_nona %>% dplyr::group_by(gênero) %>% shapiro.test(big_five_nona$extr)
big_five_nona %>% dplyr::group_by(gênero) %>% shapiro.test(extr)
big_five_nona %>% dplyr::group_by(gênero) %>% shapiro.test("extr")
library(psych)
skew(big_five_BR$extr, na.rm = TRUE)              # pacote psych
kurtosi(big_five_BR$extr, na.rm = TRUE)           # pacote psych
big_five_BR %>% group_by(gênero) %>% select("extr") %>% shapiro.test()
skew(big_five_BR$extr, na.rm = TRUE)
skew(big_five_BR$neur, na.rm = TRUE)
skew(big_five_BR$amab, na.rm = TRUE)
skew(big_five_BR$cons, na.rm = TRUE)
skew(big_five_BR$aber, na.rm = TRUE)
kurtosi(big_five_BR$extr, na.rm = TRUE)
kurtosi(big_five_BR$neur, na.rm = TRUE)
kurtosi(big_five_BR$amab, na.rm = TRUE)
kurtosi(big_five_BR$cons, na.rm = TRUE)
kurtosi(big_five_BR$aber, na.rm = TRUE)
kurtosi(big_five_BR$aber, na.rm = TRUE)
library(car)
leveneTest(extr ~ gênero, big_five_BR, center=mean)
leveneTest(extr ~ gênero, big_five_BR, center=mean)
leveneTest(neur ~ gênero, big_five_BR, center=mean)
leveneTest(amab ~ gênero, big_five_BR, center=mean)
leveneTest(cons ~ gênero, big_five_BR, center=mean)
leveneTest(aber ~ gênero, big_five_BR, center=mean)
leveneTest(aber ~ gênero, big_five_BR, center=mean)
t.test(extr ~ gênero, big_five_BR, var.equal = TRUE)
testet <- t.test(extr ~ gênero, big_five_BR, var.equal = TRUE)
testet$statistic
testet$parameter
testet$p.value
testet$conf.int
testet$estimate
## OBS: Por default, o teste realizado pelo pacote car tem como base a mediana, que é mais robusto, mas, para ficar igual ao SPSS, mudamos para a média, por isso o argumento center=mean.
## Em todas as variáveis as variâncias foram homogêneas
rm(testet)
t_extr <- t.test(extr ~ gênero, big_five_BR, var.equal = TRUE)
t_neur <- t.test(neur ~ gênero, big_five_BR, var.equal = TRUE)
t_amab <- t.test(amab ~ gênero, big_five_BR, var.equal = TRUE)
t_cons <- t.test(cons ~ gênero, big_five_BR, var.equal = TRUE)
t_aber <- t.test(aber ~ gênero, big_five_BR, var.equal = TRUE)
summary(t_extr)
summarise(t_extr)
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(t_extr$p.value,
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value))
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(t_extr$p.value,
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value)) %>% pander::pander()
library(tidyverse)
library(pander)
library(psych)
library(knitr)
library(car)
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(t_extr$p.value,
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value)) %>% pander::pander()
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(random(t_extr$p.value),digits = 2),
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value)) %>% pander::pander()
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(random(t_extr$p.value,digits = 2),
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value)) %>% pander::pander()
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(t_extr$statistic,
t_neur$statistic,
t_amab$statistic,
t_cons$statistic,
t_aber$statistic),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(round(t_extr$p.value,digits = 2),
t_neur$p.value,
t_amab$p.value,
t_cons$p.value,
t_aber$p.value)) %>% pander::pander()
data.frame(Variável = c("Extr","Neur","Amab","Cons","Aber"),
t = c(round(t_extr$statistic,digits = 2),
round(t_neur$statistic,digits = 2),
round(t_amab$statistic,digits = 2),
round(t_cons$statistic,digits = 2),
round(t_aber$statistic,digits = 2)),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(round(t_extr$p.value,digits = 2),
round(t_neur$p.value,digits = 2),
round(t_amab$p.value,digits = 2),
round(t_cons$p.value,digits = 2),
round(t_aber$p.value,digits = 2))) %>% pander::pander()
data.frame(Variável = c("Extroversão","Neuroticismo","Amabilidade",
"Conscienciosidade","Abertura"),
t = c(round(t_extr$statistic,digits = 3),
round(t_neur$statistic,digits = 3),
round(t_amab$statistic,digits = 3),
round(t_cons$statistic,digits = 3),
round(t_aber$statistic,digits = 3)),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(round(t_extr$p.value,digits = 3),
round(t_neur$p.value,digits = 3),
round(t_amab$p.value,digits = 3),
round(t_cons$p.value,digits = 3),
round(t_aber$p.value,digits = 3))) %>% pander::pander()
library(janitor)
tableby(interaction(sex, country) ~ bdi_sum + bai_sum,
test = FALSE,
data = dataset) %>%
summary(text = TRUE)
library(arsenal)
describe(dataset$age, na.rm = TRUE) %>% kable(format = "markdown")
## Também pode dar as médias em função do sexo, estratificado por país
tableby(sex ~ age + bdi_sum + bai_sum, data = dataset, strata = country) %>% summary(text = TRUE)
## ou o contrário
tableby(country ~ age + bdi_sum + bai_sum, data = dataset, strata = sex) %>% summary(text = TRUE)
tableby(interaction(sex, country) ~ bdi_sum + bai_sum,
test = FALSE,
data = dataset) %>%
summary(text = TRUE)
## Usando a função tableby do pacote arsenal
tableby(gênero ~ extr + neur + amab + cons + aber, data = big_five_BR) %>% summary(text = TRUE)
data.frame(Variável = c("Extroversão","Neuroticismo","Amabilidade",
"Conscienciosidade","Abertura"),
t = c(round(t_extr$statistic,digits = 3),
round(t_neur$statistic,digits = 3),
round(t_amab$statistic,digits = 3),
round(t_cons$statistic,digits = 3),
round(t_aber$statistic,digits = 3)),
gl = c(t_extr$parameter,
t_neur$parameter,
t_amab$parameter,
t_cons$parameter,
t_aber$parameter),
p = c(round(t_extr$p.value,digits = 3),
round(t_neur$p.value,digits = 3),
round(t_amab$p.value,digits = 3),
round(t_cons$p.value,digits = 3),
round(t_aber$p.value,digits = 3))) %>% pander::pander()
## Usando a função tableby do pacote arsenal
tableby(gênero ~ extr + neur + amab + cons + aber, data = big_five_BR) %>% pander(text = TRUE)
## Usando a função tableby do pacote arsenal
tableby(gênero ~ extr + neur + amab + cons + aber, data = big_five_BR) %>% pander()
## Usando a função tableby do pacote arsenal
tableby(gênero ~ extr + neur + amab + cons + aber, data = big_five_BR, test = FALSE) %>% summary(text = TRUE)
library(tidyverse)
library(pander)
library(psych)
library(knitr)
library(arsenal)
library(car)
runif(n=30, min=1, max=5)
df$pre_teste <- runif(n=30, min=1, max=5)
as.data.frame(pre_teste) <- runif(n=30, min=1, max=5)
as.data.frame(pre_teste,runif(n=30, min=1, max=5)
df
View(df)
pre_teste <- runif(n=30, min=1, max=5)
pre_teste
df <- as.data.frame(pre_teste)
df
df$pos_teste <- runif(n=30,min=2, max=6)
df
hist(df$pre_teste)
pre_teste <- rnorm(30, mean = 5, sd = 2)
pos_teste <- rnorm(30, mean = 6.6, sd = 1.5)
pos_teste <- rnorm(30, mean = 6.6, sd = 1.5)
df <- as.data.frame(pre_teste, pos_teste)
df <- as.data.frame(c(pre_teste, pos_teste))
df
df <- as.data.frame(pre_teste,rnorm(30, mean = 5, sd = 2))
rm(pre_teste)
rm(pos_teste)
rm(df)
seq("s",1:30)
data.frame(id = paste("s",1:30,sep=""),
pre_teste = rnorm(30, mean = 5.14, sd = 1.23),
pos_teste = rnorm(30, mean = 6.78, sd = 1.03))
# Criação de um dataframe para análise de dados pareados
df <- data.frame(id = paste("s",1:30,sep=""),
pre_teste = rnorm(30, mean = 5.14, sd = 1.23),
pos_teste = rnorm(30, mean = 6.78, sd = 1.03))
df
df$dif <- df$pos_teste - df$pre_teste
df
shapiro.test(df$dif)
skew(df$dif)
kurtosi(df$dif)
t.test(df$pos_teste,df$pre_teste,paired = TRUE)
t_par <- t.test(df$pos_teste,df$pre_teste,paired = TRUE)
t_par$data.name
t_par$statistic
t_par$parameter
t_par$p.value
t_par$conf.int
t_par$estimate
t_par
t_par$statistic
summary(t_par)
summary(df$pre_teste)
summary(df$pos_teste)
data.frame(Variáves = c("Pré-teste",
"Pós-teste"),
Média = c(round(mean(df$pre_teste,na.rm=TRUE),digits=2),
round(mean(df$pos_teste,na.rm=TRUE),digits=2)),
"Desv. Padrão" = c(round(sd(df$pre_teste,na.rm=TRUE),digits=2),
round(sd(df$pos_teste,na.rm=TRUE),digits=2)))
data.frame(Variáves = c("Pré-teste",
"Pós-teste"),
Média = c(round(mean(df$pre_teste,na.rm=TRUE),digits=2),
round(mean(df$pos_teste,na.rm=TRUE),digits=2)),
"Desv. Padrão" = c(round(sd(df$pre_teste,na.rm=TRUE),digits=2),
round(sd(df$pos_teste,na.rm=TRUE),digits=2))) %>%
pander()
# Criação de um dataframe para análise de dados pareados
df <- data.frame(id = paste("s",1:30,sep=""),
pre_teste = rnorm(30, mean = 5.14, sd = 1.23),
pos_teste = rnorm(30, mean = 6.78, sd = 0.93))
df$dif <- df$pos_teste - df$pre_teste
### teste de Shapiro-Wilk para normalidade
shapiro.test(df$dif)
### Testes de assimetria e curtose
skew(df$dif)
kurtosi(df$dif)
t_par <- t.test(df$pos_teste,df$pre_teste,paired = TRUE)
t_par
summary(df$pre_teste)
summary(df$pos_teste)
data.frame(Variáves = c("Pré-teste",
"Pós-teste"),
Média = c(round(mean(df$pre_teste,na.rm=TRUE),digits=2),
round(mean(df$pos_teste,na.rm=TRUE),digits=2)),
"Desv. Padrão" = c(round(sd(df$pre_teste,na.rm=TRUE),digits=2),
round(sd(df$pos_teste,na.rm=TRUE),digits=2))) %>%
pander()
boxplot(df$pre_teste, ylab="Leitura - Pré-teste", xlab="Pré-Teste")
boxplot(df$pre_teste, ylab="Leitura - Pré-teste", xlab="Pré-Teste")
boxplot(df$pos_teste, ylab="Leitura - Pós-teste", xlab="Pós-Teste")
par(mfrow(c(1,2)))
boxplot(df$pre_teste, ylab="Leitura - Pré-teste", xlab="Pré-Teste")
boxplot(df$pos_teste, ylab="Leitura - Pós-teste", xlab="Pós-Teste")
par(mfrow(c(1,2)))
par(mfrow=c(1,2)))
par(mfrow=c(1,2))
boxplot(df$pre_teste, ylab="Leitura - Pré-teste", xlab="Pré-Teste")
boxplot(df$pos_teste, ylab="Leitura - Pós-teste", xlab="Pós-Teste")
par(mfrow=c(1,1))
describe(df$pre_teste)
describe(df$pre_teste) %>% pander()
desc_ <- describe(df$pre_teste) %>% pander()
desc_ <- describe(df$pre_teste)
library(tidyverse)
library(pander)
library(janitor)
library(psych)
library(knitr)
library(arsenal)
library(rstatix)
library(GPArotation)
library(car)
library(lmtest)
library(ggpubr)
library(QuantPsyc)
library(scatterplot3d)
names(dataset)
count(dataset,country)
library(RVAideMemoire)
library(DescTools)
detach("package:DescTools", unload = TRUE)
byf.shapiro(bdi_sum ~ country, dataset)
dataset %>% group_by(country) %>% select("bdi_sum") %>% skew()
dataset %>% group_by(country) %>% select(bdi_sum) %>% skew()
detach("package:QuantPsyc", unload = TRUE)
detach("package:rstatix", unload = TRUE)
dataset %>% filter(country=="BRAZIL") %>% select(bdi_sum) %>% skew()
dataset %>% filter(country=="BRAZIL") %>% select("bdi_sum") %>% skew()
dataset %>% filter(country=="BRAZIL") %>% dplyr::select("bdi_sum") %>% skew()
detach("package:scatterplot3d", unload = TRUE)
dataset %>% filter(country=="BRAZIL") %>% select("bdi_sum") %>% skew()
detach("package:MASS", unload = TRUE)
library(MASS, lib.loc = "C:/Program Files/R/R-4.1.1/library")
dataset %>% filter(country=="BRAZIL") %>% dplyr::select("bdi_sum") %>% skew()
# Os resultados, como de costume, deram significativos, ou seja, diferente de uma distribuição normal. Por isso, vamos usar um critério mais permissivo: as análises de assimetria e curtose.
count(dataset,country)
dataset %>% filter(country=="PORTUGAL") %>% dplyr::select("bdi_sum") %>% skew()
dataset %>% filter(country=="SPAIN") %>% dplyr::select("bdi_sum") %>% skew()
names(rwas)
count(rwas,education)
# seleção de um subset do banco de dados com
nrow(rwas)
byf.shapiro(rv ~ education, dataset)
byf.shapiro(rv ~ education, rwas)
rwas %>% filter(education == "Less than high school") %>% dplyr::select("education") %>% skew()
rwas %>% filter(education == "Less than high school") %>% dplyr::select("rv") %>% skew()
rwas %>% filter(education == "Less than high school") %>% dplyr::select("auth") %>% skew()
rwas %>%
filter(education=="Less than high school") %>%
dplyr::select("auth") %>%
skew()
rwas %>% filter(education=="High school") %>% dplyr::select("auth") %>% skew()
rwas %>% filter(education=="University degree") %>% dplyr::select("auth") %>% skew()
rwas %>% filter(education=="Graduate degree") %>% dplyr::select("auth") %>% skew()
rwas %>% filter(education=="Less than high school") %>% dplyr::select("auth") %>% kurtosi()
rwas %>% filter(education=="High school") %>% dplyr::select("auth") %>% kurtosi()
rwas %>% filter(education=="University degree") %>% dplyr::select("auth") %>% kurtosi()
rwas %>% filter(education=="Graduate degree") %>% dplyr::select("auth") %>% kurtosi()
hist(rwas$auth)
# verificação da homogeneidade das variâncias
car::leveneTest(auth ~ education, rwas)
# verificação da homogeneidade das variâncias
car::leveneTest(auth ~ education, rwas, center = mean)
# verificação da homogeneidade das variâncias
car::leveneTest(auth ~ education, rwas, center = mean)
# verificação dapresença de outliers
boxplot(auth ~ education, ylab = "educação", xlab = "autoritarismo")
# verificação dapresença de outliers
boxplot(auth ~ education, ylab = "educação", xlab = "autoritarismo")
# verificação dapresença de outliers
boxplot(auth ~ education, rwas, ylab = "educação", xlab = "autoritarismo")
# verificação dapresença de outliers
boxplot(auth ~ education, rwas, ylab = "autoritarismo", xlab = "escolaridade")
## usando identify_outliers
rwas %>% dplyr::group_by(education) %>% rstatix::identify_outliers()
## usando identify_outliers
rwas %>% dplyr::group_by(education) %>% rstatix::identify_outliers(auth)
## usando identify_outliers
rwas %>%
dplyr::group_by(education) %>%
rstatix::identify_outliers(auth)
## usando identify_outliers
rwas %>%
dplyr::select(education, auth) %>%
dplyr::group_by(education) %>%
rstatix::identify_outliers(auth)
## usando identify_outliers
rwas %>%
dplyr::select(education, auth) %>%
dplyr::group_by(education) %>%
rstatix::identify_outliers(auth) %>% kable()
anova_auth <- aov(auth ~ education, rwas)
summary(anova_auth)
detach("package:RVAideMemoire", unload = TRUE)
